#!/usr/bin/perl
use strict;
use JSON::RPC::Client;
use JSON;
# use Data::Dumper;
# 
#
# Parameters:
# 	autoconf
# 	config
#
# Configuration variables:
#
#	username
#	password
#	host
#	port


my $username = $ENV{'username'} || '';
my $password = $ENV{'password'} || '';
my $host = $ENV{'host'} || '127.0.0.1';
my $port = $ENV{'port'} || 9091;

$0 =~ /transmission_(.+)*$/; 
my $graph = $1;

#if (exists $ARGV[0] and $ARGV[0] eq "autoconf") {
#	my $test = `transmission-remote $auth -st 2>&1`;
#	if ($? == 0) {
#		print "yes\n";
#	} else {
#		print "no ($test)\n";
#	}
#	exit 0;
#}

if (exists $ARGV[0] and $ARGV[0] eq "suggest") {
	print "traffic\nstatus\n";
	exit 0;
}

#output configuration and exit - required by Munin
if (exists $ARGV[0] and $ARGV[0] eq "config") {

	print "graph_category torrent\n";
	if ($graph eq "traffic") {
		print "graph_title Transmission traffic\n"; 
		print "graph_vlabel Bytes\n";
		#print "graph_info \n";
		print "graph_order down up\n";
		print "graph_args --base 1024\n";

		print "down.label Download\n";
		print "down.draw LINE1\n";
		print "down.type COUNTER\n";
		print "down.min 0\n";
		
		print "down.graph no\n";
		print "down.cdef down,8,*\n";
		

		print "up.label Bps\n";
		print "up.draw LINE1\n";
		print "up.type COUNTER\n";
		print "up.min 0\n";
		
		print "up.negative down\n";
		print "up.cdef up,8,*\n";
    
    } elsif ($graph eq "status") {
        print "graph_title Transmission torrent status\n";
        print "graph_vlabel Count\n";
        print "graph_order stopped seeding waiting downloading checking\n";

        print "stopped.type GAUGE\n";
        print "stopped.label Stopped\n";
        print "stopped.draw AREASTACK\n";
        print "stopped.min 0\n";
        print "seeding.type GAUGE\n";
        print "seeding.label Seeding\n";
        print "seeding.draw AREASTACK\n";
        print "seeding.min 0\n";
        print "waiting.type GAUGE\n";
        print "waiting.label Waiting\n";
        print "waiting.draw AREASTACK\n";
        print "waiting.min 0\n";
        print "downloading.type GAUGE\n";
        print "downloading.label Downloading\n";
        print "downloading.draw AREASTACK\n";
        print "downloading.min 0\n";
        print "checking.type GAUGE\n";
        print "checking.label Checking\n";
        print "checking.draw AREASTACK\n";
		print "checking.min 0\n";
	}

    exit 0;
}



my $uri = "http://$host:$port/transmission/rpc";
my $client = new JSON::RPC::Client;

$client->ua->credentials("$host:$port",'Transmission',$username,$password);

my @content;
$content[0] = $client->ua->get("http://$host:$port/transmission/rpc")->content;
@content = split('<code>X-Transmission-Session-Id: ',$content[0]);
@content = split('</code>',$content[1]);
$client->ua->default_header('X-Transmission-Session-Id'=>"$content[0]");

# Get torrent traffic
if ($graph eq "traffic") {
	my $obj = {
	   method		=> 'session-stats',
	   arguments 	=> {}
	};

	my $res = $client->call( $uri, $obj ) || die $! . " $uri\n";


	printf("up.value %d\n", $res->content->{'arguments'}->{'current-stats'}->{'uploadedBytes'});
	printf("down.value %d\n", $res->content->{'arguments'}->{'current-stats'}->{'downloadedBytes'});

# Get torrent states
} elsif ($graph eq "status") {
	my $obj = {
	   method		=> 'torrent-get',
	   arguments 	=> {'fields' => ['status','name']}
	};

	my $res = $client->call( $uri, $obj ) || die $! . " $uri\n";

	my @torrents = @{$res->content->{'arguments'}->{'torrents'}};
	my %state_counts = ();
	for my $torrent (@torrents) {
		$state_counts{$torrent->{status}}++;
	}

	my %states = ('waiting' => 3, 'checking' => 2, 'downloading' => 4, 'seeding' => 6, 'stopped' => 0);
	while ((my $label, my $status) = each %states) {
		print "$label.value ",$state_counts{$status} || 0,"\n";
	}
}
exit 0;
